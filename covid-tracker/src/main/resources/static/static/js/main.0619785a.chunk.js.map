{"version":3,"sources":["Login.js","Signup.js","DashBoard.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Login","state","Email","Password","bind","login","event","this","setState","target","value","fetch","method","headers","body","JSON","stringify","username","password","then","Response","json","result","console","log","Status","alert","className","Container","Row","Col","md","lg","xl","CardGroup","Card","CardBody","Form","class","InputGroup","Input","type","onChange","placeholder","Button","onClick","color","block","Component","Signup","response","ok","window","location","DashBoard","Data","getWorldData","val","data","width","height","options","maintainAspectRatio","countryID","caseType","totalCount","forEach","element","push","ct","total","labels","datasets","label","backgroundColor","App","to","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.0619785a.chunk.js","sourcesContent":["import React, { Component } from 'react';  \nimport './App.css';  \nimport { Button, Card, CardBody, CardGroup, Col, Container, Form, Input, InputGroup, InputGroupAddon, InputGroupText, Row } from 'reactstrap';  \nclass Login extends Component {  \n    constructor() {  \n        super();  \n  \n        this.state = {  \n            Email: '',  \n            Password: ''  \n        }  \n  \n        this.Password = this.Password.bind(this);  \n        this.Email = this.Email.bind(this);  \n        this.login = this.login.bind(this);  \n    }  \n  \n    Email(event) {  \n        this.setState({ Email: event.target.value })  \n    }  \n    Password(event) {  \n        this.setState({ Password: event.target.value })  \n    }  \n    login(event) {  \n        debugger;  \n        fetch('http://localhost:8081/login', {  \n            method: 'post',  \n            headers: {  \n                'Accept': 'application/json',  \n                'Content-Type': 'application/json'  \n            },  \n            body: JSON.stringify({  \n                username: this.state.Email,  \n                password: this.state.Password  \n            })  \n        }).then((Response) => Response.json())  \n            .then((result) => {  \n                console.log(result);  \n                if (result.Status == 'Invalid')  \n                    alert('Invalid User');  \n                else  \n                    alert('valid User');\n            })  \n    } \n    render() {  \n  \n        return (  \n            <div className=\"app flex-row align-items-center\">  \n                <Container>  \n                    <Row className=\"justify-content-center\">  \n                        <Col md=\"9\" lg=\"7\" xl=\"6\">  \n  \n                            <CardGroup>  \n                                <Card className=\"p-2\">  \n                                    <CardBody>  \n                                        <Form>  \n                                            <div class=\"row\" className=\"mb-2 pageheading\">  \n                                                <div class=\"col-sm-12 btn btn-primary\">  \n                                                    Login  \n                             </div>  \n                                            </div>  \n                                            <InputGroup className=\"mb-3\">  \n  \n                                                <Input type=\"text\" onChange={this.Email} placeholder=\"Enter Email\" />  \n                                            </InputGroup>  \n                                            <InputGroup className=\"mb-4\">  \n  \n                                                <Input type=\"password\" onChange={this.Password} placeholder=\"Enter Password\" />  \n                                            </InputGroup>  \n                                            <Button onClick={this.login} color=\"success\" block>Login</Button>  \n                                        </Form>  \n                                    </CardBody>  \n                                </Card>  \n                            </CardGroup>  \n                        </Col>  \n                    </Row>  \n                </Container>  \n            </div>  \n        );  \n    }  \n}  \n  \nexport default Login;","import React, { Component } from 'react';  \nimport './App.css';  \nimport { Button, Card, CardBody, CardGroup, Col, Container, Form, Input, InputGroup, InputGroupAddon, InputGroupText, Row } from 'reactstrap';  \nclass Signup extends Component {  \n    constructor() {  \n        super();  \n  \n        this.state = {  \n            Email: '',  \n            Password: ''  \n        }  \n  \n        this.Password = this.Password.bind(this);  \n        this.Email = this.Email.bind(this);  \n        this.login = this.login.bind(this);  \n    }  \n  \n    Email(event) {  \n        this.setState({ Email: event.target.value })  \n    }  \n    Password(event) {  \n        this.setState({ Password: event.target.value })  \n    }  \n    login(event) {   \n        fetch('http://localhost:8081/signup', {  \n            method: 'post',  \n            headers: {  \n                'Accept': 'application/json',  \n                'Content-Type': 'application/json'  \n            },  \n            body: JSON.stringify({  \n                username: this.state.Email,  \n                password: this.state.Password  \n            })  \n        }).then(function(response) {\n            if(response.ok) {\n                window.location = 'localhost:3000/DashBoard';\n            }\n            else{\n\n            }\n        })  \n             \n    } \n    render() {  \n  \n        return (  \n            <div className=\"app flex-row align-items-center\">  \n                <Container>  \n                    <Row className=\"justify-content-center\">  \n                        <Col md=\"9\" lg=\"7\" xl=\"6\">  \n  \n                            <CardGroup>  \n                                <Card className=\"p-2\">  \n                                    <CardBody>  \n                                        <Form>  \n                                            <div class=\"row\" className=\"mb-2 pageheading\">  \n                                                <div class=\"col-sm-12 btn btn-primary\">  \n                                                    Sign up  \n                             </div>  \n                                            </div>  \n                                            <InputGroup className=\"mb-3\">  \n  \n                                                <Input type=\"text\" onChange={this.Email} placeholder=\"Enter Email\" />  \n                                            </InputGroup>  \n                                            <InputGroup className=\"mb-4\">  \n  \n                                                <Input type=\"password\" onChange={this.Password} placeholder=\"Enter Password\" />  \n                                            </InputGroup>  \n                                            <Button onClick={this.login} color=\"success\" block>Create Account</Button>  \n                                        </Form>  \n                                    </CardBody>  \n                                </Card>  \n                            </CardGroup>  \n                        </Col>  \n                    </Row>  \n                </Container>  \n            </div>  \n        );  \n    }  \n}  \n  \nexport default Signup;","import React, { Component } from 'react'; \nimport { Bar } from 'react-chartjs-2'; \n\nclass DashBoard extends Component {\n\n    constructor() {  \n        super();  \n  \n        this.state = { Data: {} };   \n        this.getWorldData = this.getWorldData.bind(this); \n    } \n\n\n    render(){                                                                                                                                                                                                                                                                                               \n        return <div>\n            <div>\n            <select onChange={(val) => this.getWorldData(val.target.value)}>\n            <option value=\"1\">India</option>\n            <option value=\"2\" >United States</option>\n            </select>\n            </div>\n            <Bar data={this.state.Data}\n            width={100}\n            height={500}\n            options={{ maintainAspectRatio: false }} ></Bar>\n        </div>\n    }\n\n    componentWillMount()\n    {\n        this.getWorldData();\n    }\n    getWorldData(countryID) {  \n        let URL = countryID ?  'http://localhost:8081/covidCount/country/'+countryID:'http://localhost:8081/covidCount/world';\n        fetch(URL, {  \n            method: 'get',  \n            headers: {  \n                'Accept': 'application/json',  \n                'Content-Type': 'application/json'  \n            },  \n             \n        }).then((Response) => Response.json())  \n            .then((result) => {  \n                let caseType = [];\n                let totalCount = [];\n                console.log(result);  \n                result.forEach(element => {\n                    caseType.push(element.ct);\n                    totalCount.push(element.total);\n                });\n                this.setState({\n                    Data:{\n                        labels:caseType,\n                        \n                        datasets: [\n                            {\n                                label: 'Covid cases world wide',\n                                data:totalCount,\n                                backgroundColor : [\n                                    \"Red\",\n                                    \"Blue\",\n                                    \"Green\"\n                                ]\n                            }\n                           \n                        ]\n                        \n                    }\n                });\n            })  \n    } \n}\n\nexport default DashBoard;","import React from 'react';  \nimport logo from './logo.svg';  \nimport './App.css';  \nimport Login from './Login';  \nimport Signup from './Signup'; \nimport DashBoard from './DashBoard';   \nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';   \nfunction App() {  \n  return (  \n    <Router>    \n      <div className=\"container\">    \n        <nav className=\"navbar navbar-expand-lg navheader\">    \n          <div className=\"collapse navbar-collapse\" >    \n            <ul className=\"navbar-nav mr-auto\">    \n              <li className=\"nav-item\">    \n                <Link to={'/Login'} className=\"nav-link\">Login</Link>    \n              </li>    \n              <li className=\"nav-item\">    \n                <Link to={'/Signup'} className=\"nav-link\">Sign Up</Link>    \n              </li>   \n              <li className=\"nav-item\">    \n                <Link to={'/DashBoard'} className=\"nav-link\">DashBoard</Link>    \n              </li>   \n               \n            </ul>    \n          </div>    \n        </nav> <br />    \n        <Switch>    \n          <Route exact path='/Login' component={Login} />      \n        </Switch>  \n        <Switch>    \n          <Route exact path='/Signup' component={Signup} />      \n        </Switch> \n        <Switch>    \n          <Route exact path='/DashBoard' component={DashBoard} />      \n        </Switch>    \n      </div>    \n    </Router>   \n  );  \n}  \n  \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}