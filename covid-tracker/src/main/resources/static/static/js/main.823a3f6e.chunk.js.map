{"version":3,"sources":["pages/login.js","pages/signup.js","pages/dashboard.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Login","state","Email","Password","bind","login","event","this","setState","target","value","fetch","method","headers","body","JSON","stringify","username","password","then","response","ok","localStorage","setItem","window","location","className","action","class","for","type","placeholder","name","required","Component","Signup","Container","Row","Col","md","lg","xl","CardGroup","Card","CardBody","Form","InputGroup","Input","onChange","Button","onClick","color","block","DashBoard","Data","getWorldData","val","data","width","height","options","maintainAspectRatio","countryID","Response","json","result","caseType","totalCount","console","log","forEach","element","push","ct","total","labels","datasets","label","backgroundColor","App","id","to","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.823a3f6e.chunk.js","sourcesContent":["import React, { Component } from 'react';   \nimport { Button, Card, CardBody, CardGroup, Col, Container, Form, Input, InputGroup, InputGroupAddon, InputGroupText, Row } from 'reactstrap';  \nclass Login extends Component {  \n    constructor() {  \n        super();  \n  \n        this.state = {  \n            Email: '',  \n            Password: ''  \n        }  \n  \n        this.Password = this.Password.bind(this);  \n        this.Email = this.Email.bind(this);  \n        this.login = this.login.bind(this);  \n    }  \n  \n    Email(event) {  \n        this.setState({ Email: event.target.value })  \n    }  \n    Password(event) {  \n        this.setState({ Password: event.target.value })  \n    }  \n    login(event) {  \n        debugger;  \n        fetch('login', {  \n            method: 'post',  \n            headers: {  \n                'Accept': 'application/json',  \n                'Content-Type': 'application/json'  \n            },  \n            body: JSON.stringify({  \n                username: this.state.Email,  \n                password: this.state.Password  \n            })  \n        }).then(function(response) {\n            if(response.ok) {\n                localStorage.setItem(\"isAuthenticated\",true);\n                window.location = '/DashBoard';\n            }\n            else{\n                \n            }\n        })  \n    } \n    render() {  \n  \n        return (  \n            <div className=\"app flex-row align-items-center\">  \n                {/* <Container>  \n                    <Row className=\"justify-content-center\">  \n                        <Col md=\"9\" lg=\"7\" xl=\"6\">  \n  \n                            <CardGroup>  \n                                <Card className=\"p-2\">  \n                                    <CardBody>  \n                                        <Form>  \n                                            <div class=\"row\" className=\"mb-2 pageheading\">  \n                                                <div class=\"col-sm-12 btn btn-primary\">  \n                                                    Login  \n                             </div>  \n                                            </div>  \n                                            <InputGroup className=\"mb-3\">  \n  \n                                                <Input type=\"text\" onChange={this.Email} placeholder=\"Enter Email\" />  \n                                            </InputGroup>  \n                                            <InputGroup className=\"mb-4\">  \n  \n                                                <Input type=\"password\" onChange={this.Password} placeholder=\"Enter Password\" />  \n                                            </InputGroup>  \n                                            <Button onClick={this.login} color=\"success\" block>Submit</Button>  \n                                        </Form>  \n                                    </CardBody>  \n                                </Card>  \n                            </CardGroup>  \n                        </Col>  \n                    </Row>  \n                </Container>   */}\n                <form action=\"login\" method=\"post\">\n                <div class=\"container\">\n                <label for=\"username\"><b>Username</b></label>\n                <input type=\"text\" placeholder=\"Enter Username\" name=\"uname\" required />\n\n                <label for=\"password\"><b>Password</b></label>\n                <input type=\"password\" placeholder=\"Enter Password\" name=\"password\" required></input>\n                <button type=\"submit\">Login</button>\n                </div>\n                </form>\n  \n\n            </div>  \n        );  \n    }  \n}  \n  \nexport default Login;","import React, { Component } from 'react';   \nimport { Button, Card, CardBody, CardGroup, Col, Container, Form, Input, InputGroup, InputGroupAddon, InputGroupText, Row } from 'reactstrap';  \nclass Signup extends Component {  \n    constructor() {  \n        super();  \n  \n        this.state = {  \n            Email: '',  \n            Password: ''  \n        }  \n  \n        this.Password = this.Password.bind(this);  \n        this.Email = this.Email.bind(this);  \n        this.login = this.login.bind(this);  \n    }  \n  \n    Email(event) {  \n        this.setState({ Email: event.target.value })  \n    }  \n    Password(event) {  \n        this.setState({ Password: event.target.value })  \n    }  \n    login(event) {   \n        fetch('/signup', {  \n            method: 'post',  \n            headers: {  \n                'Accept': 'application/json',  \n                'Content-Type': 'application/json'  \n            },  \n            body: JSON.stringify({  \n                username: this.state.Email,  \n                password: this.state.Password  \n            })  \n        }).then(function(response) {\n            if(response.ok) {\n                localStorage.setItem(\"isAuthenticated\",true);\n                window.location = '/DashBoard';\n            }\n            else{\n\n            }\n        })  \n             \n    } \n    render() {  \n  \n        return (  \n            <div className=\"app flex-row align-items-center\">  \n                <Container>  \n                    <Row className=\"justify-content-center\">  \n                        <Col md=\"9\" lg=\"7\" xl=\"6\">  \n  \n                            <CardGroup>  \n                                <Card className=\"p-2\">  \n                                    <CardBody>  \n                                        <Form>  \n                                            <div class=\"row\" className=\"mb-2 pageheading\">  \n                                                <div class=\"col-sm-12 btn btn-primary\">  \n                                                    Sign up  \n                             </div>  \n                                            </div>  \n                                            <InputGroup className=\"mb-3\">  \n  \n                                                <Input type=\"text\" onChange={this.Email} placeholder=\"Enter Email\" />  \n                                            </InputGroup>  \n                                            <InputGroup className=\"mb-4\">  \n  \n                                                <Input type=\"password\" onChange={this.Password} placeholder=\"Enter Password\" />  \n                                            </InputGroup>  \n                                            <Button onClick={this.login} color=\"success\" block>Create Account</Button>  \n                                        </Form>  \n                                    </CardBody>  \n                                </Card>  \n                            </CardGroup>  \n                        </Col>  \n                    </Row>  \n                </Container>  \n            </div>  \n        );  \n    }  \n}  \n  \nexport default Signup;","import React, { Component } from 'react'; \nimport { Bar } from 'react-chartjs-2'; \n\nclass DashBoard extends Component {\n\n    constructor() {  \n        super();  \n  \n        this.state = { \n            Data: {}\n            };   \n        this.getWorldData = this.getWorldData.bind(this); \n    } \n\n\n    render(){                                                                                                                                                                                                                                                                                               \n        return (<div>\n            <div>\n            <select onChange={(val) => this.getWorldData(val.target.value)}>\n            <option value=\"1\">India</option>\n            <option value=\"2\" >United States</option>\n            </select>\n            </div>\n            <Bar data={this.state.Data}\n            width={100}\n            height={500}\n            options={{ maintainAspectRatio: false }} ></Bar>\n        </div>);\n    }\n\n    componentWillMount()\n    {\n        this.getWorldData();\n    }\n    getWorldData(countryID) {  \n        let URL = countryID ?  'http://localhost:8081/covidCount/country/'+countryID:'http://localhost:8081/covidCount/world';\n        fetch(URL, {  \n            method: 'get',  \n            headers: {  \n                'Accept': 'application/json',  \n                'Content-Type': 'application/json'  \n            },  \n             \n        }).then((Response) => Response.json())  \n            .then((result) => {  \n                let caseType = [];\n                let totalCount = [];\n                console.log(result);  \n                result.forEach(element => {\n                    caseType.push(element.ct);\n                    totalCount.push(element.total);\n                });\n                this.setState({\n                    Data:{\n                        labels:caseType,\n                        \n                        datasets: [\n                            {\n                                label: 'Covid cases world wide',\n                                data:totalCount,\n                                backgroundColor : [\n                                    \"Red\",\n                                    \"Blue\",\n                                    \"Green\"\n                                ]\n                            }\n                           \n                        ]\n                        \n                    }\n                });\n            })  \n    } \n}\n\nexport default DashBoard;","import React from 'react';  \nimport logo from './logo.svg';  \nimport './App.css';  \nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport Login from './pages/login';  \nimport Signup from './pages/signup'; \nimport DashBoard from './pages/dashboard';   \nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';   \nfunction App() {  \n  return (  \n    <Router>    \n      <div className=\"App\">    \n      <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\">\n        <div className=\"container\">\n          <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n            <ul className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to={\"/login\"}>Login</Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to={\"/signup\"}>Sign up</Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to={\"/DashBoard\"}>DashBoard</Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav><br />    \n        <Switch> \n          <Route exact path='/' component={Login} />\n          <Route exact path='/Login' component={Login} />         \n          <Route exact path='/Signup' component={Signup} />       \n          <Route exact path='/DashBoard' component={DashBoard} />      \n        </Switch>    \n      </div>    \n    </Router>   \n  );  \n}  \n  \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}